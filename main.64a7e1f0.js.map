{"version":3,"sources":["scripts/main.js"],"names":["baseUrl","body","document","firstReceived","result","insertAdjacentHTML","liList","array","arrayAllResponse","list","liElem","id","toUpperCase","name","allDetails","threeFastestDetail","onError","message","request","url","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","getPhones","getPhonesDetails","detailUrl","getFirstReceivedDetails","ids","allIds","fastestId","fastestName","fastest","allRequests","map","el","resolve","race","data","push","getAllSuccessfulDetails","allReceived","allSettled","responses","allDetailUrl","value","urls","results","forEach","getThreeFastestDetails","threeFastest","count","filter","phonesIds","phone","catch"],"mappings":"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","file":"main.64a7e1f0.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst baseUrl = 'https://mate-academy.github.io/phone-catalogue-static/api';\nconst body = document.body;\n\nfunction firstReceived(result) {\n  body.insertAdjacentHTML('beforeend', `\n    <div class=\"first-received\">\n      <h2>\n        First Received\n      </h2>\n      <ul>\n        <li>\n          Phone ID: ${result[0]}\n        <br>\n          Phone Name: ${result[1]}\n        </li>\n      </ul>\n    </div>\n  `);\n}\n\nfunction liList(array) {\n  const arrayAllResponse = array;\n  let list = '';\n\n  for (const liElem of arrayAllResponse) {\n    list += `\n      <li>\n        Phone ID: ${(liElem.id).toUpperCase()}\n        <br>\n        Phone Name: ${liElem.name}\n      </li>\n    `;\n  }\n\n  return list;\n}\n\nfunction allDetails(list) {\n  body.insertAdjacentHTML('beforeend', `\n    <div class=\"all-successful\">\n      <h2>\n        All Successful\n      </h2>\n      <ol>\n        ${list}\n      </ol>\n    </div>\n  `);\n}\n\nfunction threeFastestDetail(list) {\n  body.insertAdjacentHTML('beforeend', `\n    <div class=\"three-fatest\">\n      <h2>\n        Three Fastest\n      </h2>\n      <ol>\n        ${list}\n      </ol>\n    </div>\n  `);\n}\n\nfunction onError(message) {\n  body.insertAdjacentHTML('beforeend', `\n    <div class=\"notification\">\n      ${message}\n    </div>\n  `);\n}\n\nconst request = (url) => {\n  return fetch(`${url}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`)\n        );\n      }\n\n      return response.json();\n    });\n};\n\nconst getPhones = () => {\n  return request(`${baseUrl}/phones.json`);\n};\n\nconst getPhonesDetails = (detailUrl) => {\n  return request(`${detailUrl}`);\n};\n\nconst getFirstReceivedDetails = (ids) => {\n  const allIds = ids;\n  const fastest = [];\n  let fastestId;\n  let fastestName;\n  const allRequests = allIds.map(el => `${baseUrl}/phones/${el}.json`);\n\n  return new Promise((resolve, reject) => {\n    Promise.race(allRequests.map(el => fetch(el)))\n      .then(data => data.json())\n      .then(result => {\n        fastestId = result.id;\n        fastestName = result.name;\n\n        fastest.push(fastestId);\n        fastest.push(fastestName);\n\n        resolve(fastest);\n      });\n  });\n};\n\nconst getAllSuccessfulDetails = (ids) => {\n  const allIds = ids;\n  const allReceived = [];\n  let allDetailUrl = [];\n  const allRequests = allIds.map(el => `${baseUrl}/phones/${el}.json`);\n\n  return new Promise((resolve, reject) => {\n    Promise.allSettled(allRequests.map(el => fetch(el)))\n      .then(responses => {\n        allDetailUrl = responses.map(response => response.value.url);\n\n        return allDetailUrl;\n      })\n      .then(urls => {\n        Promise.allSettled(urls.map(url => getPhonesDetails(url)))\n          .then(results => {\n            const list = results;\n\n            list.forEach(el => {\n              allReceived.push({\n                id: el.value.id,\n                name: el.value.name,\n              });\n            });\n\n            resolve(allReceived);\n          });\n      });\n  });\n};\n\nconst getThreeFastestDetails = (ids) => {\n  let allIds = ids;\n  const threeFastest = [];\n  let count = 3;\n  let allRequests = allIds.map(el => `${baseUrl}/phones/${el}.json`);\n\n  return new Promise((resolve, reject) => {\n    function race() {\n      if (count > 0) {\n        count--;\n\n        Promise.race(allRequests.map(el => fetch(el)))\n          .then(data => data.json())\n          .then(result => {\n            threeFastest.push({\n              id: result.id,\n              name: result.name,\n            });\n\n            allIds = allIds.filter(el => el !== result.id);\n            allRequests = allIds.map(el => `${baseUrl}/phones/${el}.json`);\n\n            if (count === 0) {\n              resolve(threeFastest);\n            }\n\n            race();\n          });\n      }\n    }\n\n    race();\n  });\n};\n\ngetPhones()\n  .then(result => {\n    const phonesIds = [];\n\n    for (const phone of result) {\n      phonesIds.push(phone.id);\n    }\n\n    return phonesIds;\n  })\n  .then(result => {\n    return getFirstReceivedDetails(result);\n  })\n  .then(firstReceived)\n  .catch(onError);\n\ngetPhones()\n  .then(result => {\n    const phonesIds = [];\n\n    for (const phone of result) {\n      phonesIds.push(phone.id);\n    }\n\n    return phonesIds;\n  })\n  .then(response => {\n    return getAllSuccessfulDetails(response);\n  })\n  .then(data => {\n    allDetails(liList(data));\n  })\n  .catch(onError);\n\ngetPhones()\n  .then(result => {\n    const phonesIds = [];\n\n    for (const phone of result) {\n      phonesIds.push(phone.id);\n    }\n\n    return phonesIds;\n  })\n  .then(response => {\n    return getThreeFastestDetails(response);\n  })\n  .then(result => threeFastestDetail(liList(result)))\n  .catch(onError);\n"]}